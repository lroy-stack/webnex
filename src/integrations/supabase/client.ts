// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://xlemleldxfgarrcoffkq.supabase.co";
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhsZW1sZWxkeGZnYXJyY29mZmtxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY3MDQ4MTIsImV4cCI6MjA2MjI4MDgxMn0.91Xoso5UE_TvdRQh2iBCCR0yiZYsU0o6iiq5WlWHjdk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Cache for role queries to avoid redundant database calls
const roleCache = new Map<string, string>();

// Create the client with stronger session handling
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce', // Use PKCE flow for better security
    storage: {
      getItem: (key) => {
        try {
          const storedValue = window.localStorage.getItem(key);
          if (!storedValue) return null;
          return JSON.parse(storedValue);
        } catch (error) {
          console.error('Error getting auth session from storage:', error);
          return null;
        }
      },
      setItem: (key, value) => {
        try {
          window.localStorage.setItem(key, JSON.stringify(value));
        } catch (error) {
          console.error('Error setting auth session in storage:', error);
        }
      },
      removeItem: (key) => {
        try {
          window.localStorage.removeItem(key);
        } catch (error) {
          console.error('Error removing auth session from storage:', error);
        }
      }
    }
  }
});

// Helper to check and refresh the session if needed
export const checkAndRefreshSession = async (): Promise<boolean> => {
  console.time('checkAndRefreshSession');
  try {
    // Try to get the current session
    const { data, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error("Session error:", error);
      clearSupabaseData();
      await supabase.auth.signOut({ scope: 'local' });
      console.timeEnd('checkAndRefreshSession');
      return false;
    }
    
    if (!data.session) {
      console.log("No valid session found, attempting to refresh");
      // Try to refresh the session
      const { data: refreshData, error: refreshError } = await supabase.auth.refreshSession();
      
      if (refreshError || !refreshData.session) {
        // If refresh fails, clear the session
        console.log("Session refresh failed, clearing local session");
        clearSupabaseData();
        await supabase.auth.signOut({ scope: 'local' });
        console.timeEnd('checkAndRefreshSession');
        return false;
      }
      
      console.log("Session refreshed successfully");
      console.timeEnd('checkAndRefreshSession');
      return true;
    }
    
    // Verify session has required claims
    const user = data.session.user;
    if (!user || !user.id) {
      console.error("Session missing required user information");
      clearSupabaseData();
      await supabase.auth.signOut({ scope: 'local' });
      console.timeEnd('checkAndRefreshSession');
      return false;
    }
    
    // Session is valid
    console.timeEnd('checkAndRefreshSession');
    return true;
  } catch (error) {
    console.error("Error checking session:", error);
    // If there's an exception, clear the session to be safe
    clearSupabaseData();
    await supabase.auth.signOut({ scope: 'local' });
    console.timeEnd('checkAndRefreshSession');
    return false;
  }
};

// Get user role efficiently, with caching
export const getUserRole = async (userId: string): Promise<string | null> => {
  console.time('getUserRole');
  // Check cache first
  if (roleCache.has(userId)) {
    const cachedRole = roleCache.get(userId);
    console.timeEnd('getUserRole');
    return cachedRole || null;
  }

  try {
    // Query database for role
    const { data, error } = await supabase
      .from('user_roles')
      .select('role')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(1)
      .single();
      
    if (error || !data) {
      console.log("No specific role found, defaulting to client");
      // Cache the default role to avoid future queries
      roleCache.set(userId, 'client');
      console.timeEnd('getUserRole');
      return 'client';
    }
    
    // Cache the role for future use
    roleCache.set(userId, data.role);
    console.timeEnd('getUserRole');
    return data.role;
  } catch (error) {
    console.error("Error fetching user role:", error);
    console.timeEnd('getUserRole');
    return null;
  }
};

// Clear all Supabase-related items from localStorage
export const clearSupabaseData = () => {
  console.time('clearSupabaseData');
  const keys = Object.keys(localStorage);
  for (const key of keys) {
    if (key.startsWith('supabase.auth.') || key.includes('supabase.auth')) {
      localStorage.removeItem(key);
    }
  }
  
  // Also clear role cache
  roleCache.clear();
  console.timeEnd('clearSupabaseData');
};